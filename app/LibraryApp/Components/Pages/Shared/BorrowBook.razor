@page "/borrow-book/{bookId:int}"

@using LibraryApp.Data
@using LibraryApp.Services
@using LibraryApp.Models
@using Microsoft.EntityFrameworkCore
@inject IBookService BookService
@inject IBorrowedService BorrowedService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Borrow Book</h3>

@if (BookDetail != null)
{
    <div>
        <AuthorizeView Roles="admin">
            <Authorized>
                @if (Users != null) 
                {
                    <label for="selectUser">Select User:</label>
                    <select id="selectUser" @bind="SelectedUserId">
                        @foreach (var user in Users)
                        {
                            <option value="@user.UserId">@user.Login</option>
                        }
                    </select>
                }
            </Authorized>
        </AuthorizeView>
        <p>Title: @BookDetail.Title</p>
        <p>Author: @BookDetail.Author</p>
        <p>Genre: @BookDetail.Genre</p>
        <!-- Dodaj więcej informacji na temat książki -->
    </div>
}
else
{
    <p>Book not found</p>
}

<div>
    <label for="datepicker">Borrow Date:</label>
    <input id="borrowDate" type="date" @bind="BorrowDate" />
    @if (!IsValidDate) {
        <p class="text-danger">Borrow date cannot be in the past.</p>
    }
</div>

<AuthorizeView Roles="admin">
    <Authorized>
        <button @onclick="BorrowBookButtonAdmin">Confirm Borrow</button>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="user">
    <Authorized>
        <button @onclick="BorrowBookButtonUser">Confirm Reservation</button>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int BookId { get; set; }
    private BookDetail? BookDetail;
    private Borrowed NewBorrow = new Borrowed();
    private DateOnly BorrowDate = DateOnly.FromDateTime(DateTime.Today);
    private DateOnly MinDate = DateOnly.FromDateTime(DateTime.Today);
    private int UserId;
    private string? UserName;
    private List<User>? Users;
    private int SelectedUserId;
    private bool IsValidDate = true;
    protected override async Task OnInitializedAsync()
    {
        BookDetail = await BookService.GetBookDetailAsync(BookId);
        Users = await UserService.GetAllUsersAsync();
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Sprawdzanie, czy użytkownik jest zalogowany
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Pobieranie identyfikatora użytkownika
            UserName = user.Identity.Name;
            var foundUser = await UserService.GetUserByNameAsync(UserName);
            if (foundUser != null)
            {
                UserId = foundUser.UserId;
            }
        }
    }

    private async Task BorrowBookButtonUser() {
        ValidateDate();
        if(!IsValidDate) return;

        NewBorrow.UserId = UserId;
        NewBorrow.BookId = BookDetail?.BookId;
        NewBorrow.BorrowDate = BorrowDate;
        NewBorrow.PlannedReturnDate = null;
        NewBorrow.ReturnDate = null;
        NewBorrow.Charge = 0;

        await BorrowedService.AddBorrowedAsync(NewBorrow);

        NavigationManager.NavigateTo($"/borrowed-user/{UserId}");
    }

    private async Task BorrowBookButtonAdmin() {
        ValidateDate();
        if(!IsValidDate) return;

        NewBorrow.UserId = SelectedUserId;
        NewBorrow.BookId = BookDetail?.BookId;
        NewBorrow.BorrowDate = BorrowDate;
        NewBorrow.PlannedReturnDate = null;
        NewBorrow.ReturnDate = null;
        NewBorrow.Charge = 0;

        await BorrowedService.AddBorrowedAsync(NewBorrow);

        NavigationManager.NavigateTo("/borrowed");
    }

    private void ValidateDate() {
        if (DateOnly.TryParse(BorrowDate.ToString(), out var selectedDate))
        {
            IsValidDate = selectedDate >= MinDate;
        }
        else
        {
            IsValidDate = false;
        }
    }
}    
