@page "/borrow-book/{bookId:int}"

@using LibraryApp.Data
@using LibraryApp.Services
@using LibraryApp.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject IBookService BookService
@inject IBorrowedService BorrowedService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize(Roles = "admin, user")]

<div class="container mt-4">
    <h3>Borrow Book</h3>

    @if (BookDetail != null)
    {
        <div class="card mt-3">
            <div class="card-body">
                <h5 class="card-title">Book Details</h5>
                <p class="card-text"><strong>Title: </strong>@BookDetail.Title</p>
                <p class="card-text"><strong>Author: </strong>@BookDetail.Author</p>
                <p class="card-text"><strong>Genre: </strong>@BookDetail.Genre</p>

                <AuthorizeView Roles="admin">
                    <Authorized>
                        @if (Users != null)
                        {
                            <div class="mb-3">
                                <label for="selectUser" class="form-label">Select User:</label>
                                <select id="selectUser" class="form-select" @bind="SelectedUserId">
                                    @foreach (var user in Users)
                                    {
                                        <option value="@user.UserId">@user.Login</option>
                                    }
                                </select>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning mt-3" role="alert">
            Book not found.
        </div>
    }

    <div class="card mt-3">
        <div class="card-body">
            <div class="mb-3">
                <label for="datepicker" class="form-label">Borrow Date:</label>
                <input id="borrowDate" type="date" class="form-control" @bind="BorrowDate" />
                @if (!IsValidDate)
                {
                    <div class="text-danger mt-2">Borrow date cannot be in the past.</div>
                }
            </div>

            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-primary" @onclick="BorrowBookButtonAdmin">Confirm Borrow</button>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView Roles="user">
                <Authorized>
                    <button class="btn btn-primary" @onclick="BorrowBookButtonUser">Confirm Reservation</button>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int BookId { get; set; }
    private BookDetail? BookDetail;
    private Borrowed NewBorrow = new Borrowed();
    private DateOnly BorrowDate = DateOnly.FromDateTime(DateTime.Today);
    private DateOnly MinDate = DateOnly.FromDateTime(DateTime.Today);
    private int UserId;
    private string? UserName;
    private List<User>? Users;
    private int SelectedUserId;
    private bool IsValidDate = true;

    protected override async Task OnInitializedAsync()
    {
        BookDetail = await BookService.GetBookDetailAsync(BookId);
        Users = await UserService.GetAllUsersAsync();
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            var foundUser = await UserService.GetUserByNameAsync(UserName);
            if (foundUser != null)
            {
                UserId = foundUser.UserId;
            }
        }
    }

    private async Task BorrowBookButtonUser()
    {
        ValidateDate();
        if (!IsValidDate) return;

        NewBorrow.UserId = UserId;
        NewBorrow.BookId = BookDetail?.BookId;
        NewBorrow.BorrowDate = BorrowDate;
        NewBorrow.PlannedReturnDate = null;
        NewBorrow.ReturnDate = null;
        NewBorrow.Charge = 0;

        await BorrowedService.AddBorrowedAsync(NewBorrow);

        NavigationManager.NavigateTo($"/borrowed-user");
    }

    private async Task BorrowBookButtonAdmin()
    {
        ValidateDate();
        if (!IsValidDate) return;

        NewBorrow.UserId = SelectedUserId;
        NewBorrow.BookId = BookDetail?.BookId;
        NewBorrow.BorrowDate = BorrowDate;
        NewBorrow.PlannedReturnDate = null;
        NewBorrow.ReturnDate = null;
        NewBorrow.Charge = 0;

        await BorrowedService.AddBorrowedAsync(NewBorrow);

        NavigationManager.NavigateTo("/borrowed");
    }

    private void ValidateDate()
    {
        if (DateOnly.TryParse(BorrowDate.ToString(), out var selectedDate))
        {
            IsValidDate = selectedDate >= MinDate;
        }
        else
        {
            IsValidDate = false;
        }
    }
}
