@page "/borrowed"
@using LibraryApp.Models
@using Microsoft.AspNetCore.Authorization
@inject Services.IBorrowedService BorrowedService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "admin")]
@rendermode InteractiveServer

<PageTitle>Borrowed</PageTitle>

<div class="container mt-4">
    <h3 class="mb-4">Borrowed Books</h3>

    @if (borrowedDetails == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (borrowedDetails.Count == 0)
    {
        <div class="alert alert-info" role="alert">
            No borrowed books found.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>User</th>
                        <th>Book</th>
                        <th>Borrow Date</th>
                        <th>Planned Return Date</th>
                        <th>Return Date</th>
                        <th>Charge</th>
                        <AuthorizeView>
                            <Authorized>
                                <th>Edit</th>
                            </Authorized>
                        </AuthorizeView>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var borrowed in borrowedDetails)
                    {
                        <tr>
                            <td>@borrowed.User</td>
                            <td>@borrowed.Book</td>
                            <td>@borrowed.BorrowDate?.ToString("d")</td>
                            <td>@borrowed.PlannedReturnDate?.ToString("d")</td>
                            <td>@borrowed.ReturnDate?.ToString("d")</td>
                            <td>@string.Format("{0:C}", borrowed.Charge)</td>
                            <AuthorizeView>
                                <Authorized>
                                    <td>
                                        <button class="btn btn-primary" @onclick="() => EditBorrowed(borrowed.BorrowedId)"
                                                disabled="@(IsEntryReturned(borrowed))">Edit</button>
                                    </td>
                                </Authorized>
                            </AuthorizeView>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<BorrowedDetail>? borrowedDetails;

    protected override async Task OnInitializedAsync()
    {
        borrowedDetails = await BorrowedService.GetBorrowedDetailsAsync();
    }

    private void EditBorrowed(int borrowedId)
    {
        NavigationManager.NavigateTo($"/edit-borrowed/{borrowedId}");
    }

    private bool IsEntryReturned(BorrowedDetail borrowed)
    {
        return borrowed.ReturnDate != null;
    }
}
